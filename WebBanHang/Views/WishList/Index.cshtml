@model PagedList.IPagedList<WebBanHang.Models.EF.WishList>
@{
    ViewBag.Title = "Sản Phẩm Yêu Thích";
    Layout = "~/Views/Shared/_Layout.cshtml";
}



<div class="container-fluid py-5">
    <div class="container py-5">
        <div class="row">
            <div class="col-lg-12">
                <div class="card border-0 rounded-3 shadow-lg">
                    <div class="card-body p-4">
                        <div class="d-flex justify-content-between align-items-center mb-4">
                            <h4 class="mb-0">Sản Phẩm Yêu Thích</h4>
                            <div class="d-flex align-items-center">
                                <span class="me-2">Sắp xếp:</span>
                                <select class="form-select" style="width: auto;">
                                    <option value="newest">Mới nhất</option>
                                    <option value="price-asc">Giá tăng dần</option>
                                    <option value="price-desc">Giá giảm dần</option>
                                    <option value="name-asc">Tên A-Z</option>
                                </select>
                            </div>
                        </div>

                        <div class="row g-4">
                            @foreach (var item in Model)
                            {
                                var strImg = item.Product.ProductImage.FirstOrDefault(x => x.IsDefault)?.Image ?? "path/to/default.png";

                                <div class="col-md-6 col-lg-4">
                                    <div class="card border-0 rounded-3 shadow-lg h-100">
                                        <div class="position-relative">
                                            <img src="@strImg" class="card-img-top" alt="@item.Product.Title" />
                                            <div class="position-absolute top-0 end-0 p-2">
                                                @*<button class="btn btn-outline-danger rounded-circle">
                                                    <i class="fas fa-heart"></i>
                                                </button>*@
                                            </div>
                                        </div>
                                        <div class="card-body">
                                            <h6 class="card-title">@item.Product.Title</h6>
                                            <p class="card-text text-muted">Mã: @item.Product.ProductCode</p>
                                            <p class="card-text text-muted" style="font-size: 0.85rem; white-space: pre-line;">@item.Product.Description</p>
                                            <h6 class="text-primary mb-3 text-center">
                                                @if (item.Product.PriceSale.HasValue && item.Product.PriceSale.Value > 0 && item.Product.IsSale)
                                                {
                                                    <span class="text-decoration-line-through text-muted me-2">@WebBanHang.Models.Common.Common.FormatNumber(item.Product.Price, 0) ₫</span>
                                                    <span>@WebBanHang.Models.Common.Common.FormatNumber(item.Product.PriceSale.Value, 0) ₫</span>
                                                }
                                                else
                                                {
                                                    <span>@WebBanHang.Models.Common.Common.FormatNumber(item.Product.Price, 0) ₫</span>
                                                }
                                            </h6>
                                            <div class="d-grid">
                                                <a href="/chi-tiet/@item.Product.Alias-p@(item.Product.Id)" class="btn btn-primary rounded-pill">Xem chi tiết</a>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            }

                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<script>
    document.addEventListener('DOMContentLoaded', function () {
        

        // Xử lý sắp xếp
        const sortSelect = document.querySelector('.form-select');
        const productContainer = document.querySelector('.row.g-4');
        const products = Array.from(productContainer.children);

        sortSelect.addEventListener('change', function () {
            const sortValue = this.value;
            let sortedProducts;

            switch (sortValue) {
                case 'newest':
                    // Mặc định sắp xếp theo thứ tự hiển thị ban đầu
                    sortedProducts = products;
                    break;
                case 'price-asc':
                    sortedProducts = products.sort((a, b) => {
                        const priceA = parseInt(a.querySelector('.text-primary').textContent.replace(/[^\d]/g, ''));
                        const priceB = parseInt(b.querySelector('.text-primary').textContent.replace(/[^\d]/g, ''));
                        return priceA - priceB;
                    });
                    break;
                case 'price-desc':
                    sortedProducts = products.sort((a, b) => {
                        const priceA = parseInt(a.querySelector('.text-primary').textContent.replace(/[^\d]/g, ''));
                        const priceB = parseInt(b.querySelector('.text-primary').textContent.replace(/[^\d]/g, ''));
                        return priceB - priceA;
                    });
                    break;
                case 'name-asc':
                    sortedProducts = products.sort((a, b) => {
                        const nameA = a.querySelector('.card-title').textContent;
                        const nameB = b.querySelector('.card-title').textContent;
                        return nameA.localeCompare(nameB);
                    });
                    break;
            }

            // Xóa tất cả sản phẩm hiện tại
            while (productContainer.firstChild) {
                productContainer.removeChild(productContainer.firstChild);
            }

            // Thêm lại sản phẩm đã sắp xếp
            sortedProducts.forEach(product => {
                productContainer.appendChild(product);
            });
        });
    });
</script>

